#!/bin/bash

RED="\e[1;31m"
GREEN="\e[1;32m"
YELLOW="\e[1;33m"
COLOR="\e[0m"

DEFAULT_CV=1
DEFAULT_CVP=1
DEFAULT_CS=0
DEFAULT_CSP=0
DEFAULT_a=1
DEFAULT_b=0

DEFAULT_N=3
DEFAULT_n=1

a_change=false
b_change=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    nuclei=*)
      Nuclei="${1#*=}"
      ;;
    N=*)
      RunEnd="${1#*=}"
      ;;
    N=*)
      RunEnd="${1#*=}"
      ;;
    CV=*)
      CV="${1#*=}"
      ;;
    CS=*)
      CS="${1#*=}"
      ;;
    CVP=*)
      CVP="${1#*=}"
      ;;
    CSP=*)
      CSP="${1#*=}"
      ;;
    a=*)
      a="${1#*=}"
      a_change=true
      ;;
    b=*)
      b="${1#*=}"
      b_change=true
      ;;
    *)
      echo "Argument inconnu : $1"
      exit 1
      ;;
  esac
  shift
done

CV=${CV:-$DEFAULT_CV}
CVP=${CVP:-$DEFAULT_CVP}
CS=${CS:-$DEFAULT_CS}
CSP=${CSP:-$DEFAULT_CSP}
a=${a:-$DEFAULT_a}
b=${b:-$DEFAULT_b}

nProcess=${n:-$DEFAULT_n}
RunEnd=${N:-$DEFAULT_N}

if [[ $a_change -eq true || $b_change -eq true ]]; then
  constants="a${a}_b${b}"
  replace="s/%CS/${CS}/g; s/%CPS/${CSP}/g; s/%CV/${CV}/g; s/%CPV/${CVP}/g; s/%a/${a}/g; s/%b/${b}/g"
else
  constants="CS${CS}_CSP${CSP}_CV${CV}_CVP${CVP}"
  replace="s/%CS/${CS}/g; s/%CPS/${CSP}/g; s/%CV/${CV}/g; s/%CPV/${CVP}/g; s/%a/NaN/g; s/%b/NaN/g"
fi

if [ "$Nuclei" == "Ar" ]; then
    impl=32
    std_impl=14
    A=32
    Z=18
fi
if [ "$Nuclei" == "Mg" ]; then
    impl=53
    std_impl=31
    A=20
    Z=12
fi
if [ "$Nuclei" == "Si" ]; then
    impl=39
    std_impl=19
    A=28
    Z=16
fi
if [ "$Nuclei" == "S" ]; then
    impl=35
    std_impl=16
    A=24
    Z=14
fi

echo -e "$RED"
rm -vf "LOG/During_$Nuclei.txt"
echo -e "$COLOR"

TimeStart=$SECONDS

Analysis="wisard"

RunStart=1
TH=()
THRun=()
Saver=0
RunN=$(($RunStart+$nProcess))
TimeCheck=60 # in seconds

Saver=$RunStart
i=0

rootCRADLEfile="../../../../../../mnt/hgfs/shared/"

while [ $Saver -le $RunEnd ]; do
    th=${TH[i]}
    run=${THRun[i]}
    if kill -0 $th >/dev/null 2>&1; then
	      file_path="../../../../../../mnt/hgfs/shared/${Nuclei}_${constants}_${run}.root"
        if [ $(($(date +%s)-$(stat -c %Y "$file_path"))) -ge 600 ]; then
            # Le processus est bloquÃ© depuis plus de 10 min, on le tue
            echo "Process $th stopped more than 10 min.  Killing process..."
            kill $th
            rm "${rootCRADLEfile}data/${Nuclei}_${constants}_${run}.txt"

        fi
    else
        TimeCurrent=$SECONDS
        DureeCurrent=$(($TimeCurrent-$TimeStart))
        SecondCurrent=$(printf "%02d" "$(($DureeCurrent%60))")
        MinuteCurrent=$(printf "%02d" "$((($DureeCurrent/60)%60))")
        HeureCurrent=$(printf "%02d" "$((($DureeCurrent/3600)%24))")
        JourCurrent=$(printf "%d" "$((($DureeCurrent/(3600*24))))")
        RunKilled=$run
        if [[ $Saver -gt $RunN ]]; then
            echo "Duree Run $RunKilled : ${JourCurrent}j:${HeureCurrent}h:${MinuteCurrent}m:${SecondCurrent}s" >> "LOG/During_$Nuclei.txt"
        fi


        cp macro_base.mac tempory/macro_${Saver}_${Nuclei}_${constants}_bis.mac
        sed -e "s/%input/${Nuclei}_${constants}_${Saver}.txt/g" tempory/macro_${Saver}_${Nuclei}_${constants}_bis.mac > tempory/macro_${Saver}_${Nuclei}_${constants}.mac
        rm tempory/macro_${Saver}_${Nuclei}_${constants}_bis.mac
        cmdAnalysis="${Analysis} tempory/macro_${Saver}_${Nuclei}_${constants}.mac ${rootCRADLEfile}${Nuclei}_${constants}_${Saver} ${impl} ${std_impl}"
        echo -e "$GREEN $cmdAnalysis $COLOR"

	      cd ../CRADLE-master/build
        cp ../config/config_base.txt config_${constants}_bis.txt
        sed -e "$replace" config_${constants}_bis.txt > ../config/config_${constants}.txt
        rm config_${constants}_bis.txt
        ./CRADLE++ nucleus --name ${A}${Nuclei} -Z $Z -A $A -c ../config/config_${constants}.txt general -l 1000000 -o ../../../../../../../mnt/hgfs/shared/data/${Nuclei}_${constants}_${Saver}.txt
        cd -
        $cmdAnalysis &

        TH[$i]=${!}
        THRun[$i]=$Saver
        Saver=$(($Saver+1))
    fi
    i=$(($i+1))
    if [ $i -eq $nProcess ]; then
        i=0
        sleep $TimeCheck
    fi
done

wait
TimeEnd=$SECONDS

Duree=$(($TimeEnd-$TimeStart))
Second=$(printf "%02d" "$(($Duree%60))")
Minute=$(printf "%02d" "$((($Duree/60)%60))")
Heure=$(printf "%02d" "$((($Duree/3600)%24))")
Jour=$(printf "%d" "$((($Duree/(3600*24))))")
echo -e "$RED Duree total : ${Jour}"
